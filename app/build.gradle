apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.chesire.zwei"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.chesire.zwei.MockTestRunner"
    }
    buildTypes {
        debug {
            buildConfigField 'String', "XIVApiKey", System.getenv("zwei_xivapi_key") ?: zwei_xivapi_key
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', "XIVApiKey", System.getenv("zwei_xivapi_key") ?: zwei_xivapi_key
        }
    }
}

dependencies {
    ext.daggerVersion = '2.17'
    ext.retrofitVersion = '2.4.0'
    ext.roomVersion = '1.1.1'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "android.arch.lifecycle:extensions:1.1.1"
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-experimental-adapter:1.0.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.26.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:0.26.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'
    implementation 'com.squareup.moshi:moshi:1.6.0'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.1'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'

    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.22.0'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    kapt "android.arch.lifecycle:compiler:1.1.1"
    kapt "android.arch.persistence.room:compiler:$roomVersion"
    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.6.0'
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:$daggerVersion"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(
        type: JacocoReport,
        group: 'verification',
        dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']
) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def coverageExcludes = ['**/R.class',
                            '**/R$*.class',
                            '**/BuildConfig.*',
                            '**/Manifest*.*',
                            '**/*Test*.*',
                            '**/*$$ViewBinder*.*',
                            '**/inject/*',
                            '**/*$InjectAdapter.*',
                            '**/Dagger*.*',
                            '**/*_Provide*Factory.*',
                            '**/*_Member*Injector.*',
                            '**/*_Factory.*',
                            'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: coverageExcludes)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}